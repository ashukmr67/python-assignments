from abc import ABC, abstractmethod

# Abstract base class
class SmartDevice(ABC):
    def __init__(self, name):
        self._name = name
        self.__is_on = False  # Private attribute

    @abstractmethod
    def operate(self):
        pass

    def show_status(self):
        status = "ON" if self.__is_on else "OFF"
        print(f"{self._name} is {status}.")

    # Encapsulation: Getter and Setter for is_on
    def turn_on(self):
        self.__is_on = True

    def turn_off(self):
        self.__is_on = False

    def is_on(self):
        return self.__is_on


# Concrete class: SmartLight
class SmartLight(SmartDevice):
    def __init__(self, name):
        super().__init__(name)
        self.__brightness = 70  # Private attribute

    def operate(self):
        self.turn_on()
        print(f"{self._name} is turned on with brightness at {self.__brightness}%.")

    # Getter and Setter for brightness
    def set_brightness(self, level):
        if 0 <= level <= 100:
            self.__brightness = level
        else:
            print("Brightness should be between 0 and 100.")

    def get_brightness(self):
        return self.__brightness


# Concrete class: SmartFan
class SmartFan(SmartDevice):
    def __init__(self, name):
        super().__init__(name)
        self.__speed = "Medium"  # Private attribute

    def operate(self):
        self.turn_on()
        print(f"{self._name} is turned on with speed set to {self.__speed}.")

    # Getter and Setter for speed
    def set_speed(self, speed):
        if speed in ["Low", "Medium", "High"]:
            self.__speed = speed
        else:
            print("Speed should be 'Low', 'Medium', or 'High'.")

    def get_speed(self):
        return self.__speed


# Concrete class: SmartAC
class SmartAC(SmartDevice):
    def __init__(self, name):
        super().__init__(name)
        self.__temperature = 24  # Private attribute

    def operate(self):
        self.turn_on()
        print(f"{self._name} is turned on with temperature set to {self.__temperature}째C.")

    # Getter and Setter for temperature
    def set_temperature(self, temp):
        if 16 <= temp <= 30:
            self.__temperature = temp
        else:
            print("Temperature should be between 16째C and 30째C.")

    def get_temperature(self):
        return self.__temperature


# Demonstration
light = SmartLight("Living Room Light")
fan = SmartFan("Bedroom Fan")
ac = SmartAC("Office AC")

# Operating and showing status
light.operate()
light.show_status()

fan.operate()
fan.show_status()

ac.operate()
ac.show_status()

# Attempting to access private attributes directly (should fail)
print("\nAttempting direct access to private attributes:")
try:
    light.__brightness = 100
except AttributeError as e:
    print(f"Error: {e}")
try:
    print(fan.__speed)
except AttributeError as e:
    print(f"Error: {e}")

# Using setters and getters
print("\nUsing setters and getters:")
light.set_brightness(90)
print(f"Updated brightness: {light.get_brightness()}%")

fan.set_speed("High")
print(f"Updated speed: {fan.get_speed()}")

ac.set_temperature(22)
print(f"Updated temperature: {ac.get_temperature()}째C")
